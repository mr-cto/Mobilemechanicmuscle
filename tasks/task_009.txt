# Task ID: 9
# Title: UI Component Integration with shadcn/ui
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Integrate shadcn/ui components for forms, modals, tables, and other UI elements across the application
# Details:
1. Initialize shadcn/ui in the project: `npx shadcn-ui@latest init`
2. Add required components:
   - Form components: `npx shadcn-ui@latest add form`
   - Button: `npx shadcn-ui@latest add button`
   - Card: `npx shadcn-ui@latest add card`
   - Dialog/Modal: `npx shadcn-ui@latest add dialog`
   - Select: `npx shadcn-ui@latest add select`
   - Table: `npx shadcn-ui@latest add table`
   - Date picker: `npx shadcn-ui@latest add calendar`
   - Toast notifications: `npx shadcn-ui@latest add toast`
3. Create custom theme configuration
4. Implement consistent styling across the application

Example shadcn/ui initialization and configuration:
```bash
# Initialize shadcn/ui
npx shadcn-ui@latest init

# Configure with project preferences
# - Typescript: Yes
# - Style: Default (or customize)
# - Base color: Slate (or preferred color)
# - Global CSS: app/globals.css
# - CSS variables: Yes
# - React Server Components: Yes
# - Components directory: components/ui
# - Utility directory: lib/utils

# Add required components
npx shadcn-ui@latest add button
npx shadcn-ui@latest add form
npx shadcn-ui@latest add input
npx shadcn-ui@latest add select
npx shadcn-ui@latest add card
npx shadcn-ui@latest add dialog
npx shadcn-ui@latest add table
npx shadcn-ui@latest add calendar
npx shadcn-ui@latest add toast
```

Example form implementation with shadcn/ui:
```tsx
// components/account/VehicleForm.tsx
'use client';

import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { toast } from '@/components/ui/use-toast';

const vehicleSchema = z.object({
  make: z.string().min(1, 'Make is required'),
  model: z.string().min(1, 'Model is required'),
  year: z.string().refine(
    (val) => {
      const year = parseInt(val);
      return !isNaN(year) && year >= 1900 && year <= new Date().getFullYear() + 1;
    },
    { message: 'Please enter a valid year' }
  ),
  notes: z.string().optional(),
});

type VehicleFormValues = z.infer<typeof vehicleSchema>;

interface VehicleFormProps {
  onSuccess?: (data: any) => void;
  initialData?: VehicleFormValues;
}

export function VehicleForm({ onSuccess, initialData }: VehicleFormProps) {
  const [isSubmitting, setIsSubmitting] = useState(false);
  
  const form = useForm<VehicleFormValues>({
    resolver: zodResolver(vehicleSchema),
    defaultValues: initialData || {
      make: '',
      model: '',
      year: '',
      notes: '',
    },
  });
  
  async function onSubmit(data: VehicleFormValues) {
    setIsSubmitting(true);
    
    try {
      const response = await fetch('/api/vehicles', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });
      
      if (!response.ok) throw new Error('Failed to save vehicle');
      
      const result = await response.json();
      
      toast({
        title: 'Vehicle saved',
        description: 'Your vehicle has been added to your account',
      });
      
      if (onSuccess) onSuccess(result);
      form.reset();
    } catch (error) {
      console.error('Vehicle save error:', error);
      toast({
        title: 'Something went wrong',
        description: 'Could not save your vehicle. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsSubmitting(false);
    }
  }
  
  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="make"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Make</FormLabel>
              <FormControl>
                <Input placeholder="Toyota" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <FormField
          control={form.control}
          name="model"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Model</FormLabel>
              <FormControl>
                <Input placeholder="Camry" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <FormField
          control={form.control}
          name="year"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Year</FormLabel>
              <FormControl>
                <Input placeholder="2020" {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <FormField
          control={form.control}
          name="notes"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Notes (Optional)</FormLabel>
              <FormControl>
                <Textarea 
                  placeholder="Any additional details about your vehicle"
                  {...field}
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        
        <Button type="submit" disabled={isSubmitting}>
          {isSubmitting ? 'Saving...' : 'Save Vehicle'}
        </Button>
      </form>
    </Form>
  );
}
```

# Test Strategy:
1. Verify all shadcn/ui components render correctly
2. Test form validation using shadcn/ui form components
3. Test modal/dialog functionality
4. Verify table components display data correctly
5. Test toast notifications
6. Ensure consistent styling across the application
7. Test responsive design of all components
