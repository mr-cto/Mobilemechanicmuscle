{
  "tasks": [
    {
      "id": 1,
      "title": "Database Setup with PostgreSQL and Drizzle ORM",
      "description": "Set up PostgreSQL database using Vercel Postgres and configure Drizzle ORM for data modeling and querying",
      "details": "1. Install required packages: `pnpm add @vercel/postgres drizzle-orm`\n2. Create database schema models for:\n   - Users (id, name, email, password, created_at)\n   - Vehicles (id, user_id, make, model, year, notes)\n   - Services (id, name, description, estimated_price, duration)\n   - Bookings (id, user_id, vehicle_id, service_id, date, time, status)\n3. Set up Drizzle configuration in a `db/index.ts` file\n4. Create migration scripts for initial schema\n5. Configure environment variables for database connection\n6. Create utility functions for common database operations\n\nExample schema definition:\n```typescript\n// db/schema.ts\nimport { pgTable, serial, text, timestamp, integer, decimal } from 'drizzle-orm/pg-core';\n\nexport const users = pgTable('users', {\n  id: serial('id').primaryKey(),\n  name: text('name').notNull(),\n  email: text('email').notNull().unique(),\n  password: text('password').notNull(),\n  createdAt: timestamp('created_at').defaultNow()\n});\n\nexport const vehicles = pgTable('vehicles', {\n  id: serial('id').primaryKey(),\n  userId: integer('user_id').references(() => users.id),\n  make: text('make').notNull(),\n  model: text('model').notNull(),\n  year: integer('year').notNull(),\n  notes: text('notes')\n});\n\n// Additional tables for services and bookings\n```",
      "testStrategy": "1. Write unit tests for database connection and basic CRUD operations\n2. Test schema migrations to ensure they apply correctly\n3. Verify foreign key constraints work as expected\n4. Test database queries with sample data\n5. Ensure proper error handling for database operations",
      "priority": "high",
      "dependencies": [],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 2,
      "title": "Authentication System with NextAuth.js",
      "description": "Implement user authentication using NextAuth.js v5 beta with email/password login and registration",
      "details": "1. Install NextAuth.js: `pnpm add next-auth@beta`\n2. Configure NextAuth.js in `app/api/auth/[...nextauth]/route.ts`\n3. Set up authentication providers (credentials provider for email/password)\n4. Create login and registration forms using shadcn/ui components\n5. Implement password hashing using bcrypt\n6. Set up session management and protected routes\n7. Create authentication hooks for client components\n\nExample NextAuth configuration:\n```typescript\n// app/api/auth/[...nextauth]/route.ts\nimport NextAuth from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport { compare } from 'bcrypt';\nimport { db } from '@/db';\nimport { users } from '@/db/schema';\nimport { eq } from 'drizzle-orm/expressions';\n\nexport const authOptions = {\n  providers: [\n    CredentialsProvider({\n      name: 'Credentials',\n      credentials: {\n        email: { label: 'Email', type: 'email' },\n        password: { label: 'Password', type: 'password' }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) return null;\n        \n        const user = await db.query.users.findFirst({\n          where: eq(users.email, credentials.email)\n        });\n        \n        if (!user) return null;\n        \n        const passwordMatch = await compare(credentials.password, user.password);\n        if (!passwordMatch) return null;\n        \n        return { id: user.id, name: user.name, email: user.email };\n      }\n    })\n  ],\n  callbacks: {\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.id;\n      }\n      return session;\n    },\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    }\n  },\n  pages: {\n    signIn: '/account/login',\n    signUp: '/account/signup'\n  }\n};\n\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };\n```",
      "testStrategy": "1. Test user registration flow with valid and invalid inputs\n2. Test login functionality with correct and incorrect credentials\n3. Verify session persistence across page reloads\n4. Test protected routes to ensure they redirect unauthenticated users\n5. Verify logout functionality\n6. Test password reset flow if implemented",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 3,
      "title": "User Account Management",
      "description": "Create user dashboard and account management features including vehicle management and service history viewing",
      "details": "1. Create account dashboard page at `/account/dashboard`\n2. Implement vehicle management section:\n   - Add new vehicle form\n   - List existing vehicles\n   - Edit/delete vehicle functionality\n3. Create service history section showing past bookings\n4. Add upcoming appointments section\n5. Implement account settings (name, email, password update)\n\nExample dashboard layout:\n```tsx\n// app/account/dashboard/page.tsx\nimport { auth } from '@/auth';\nimport { redirect } from 'next/navigation';\nimport { db } from '@/db';\nimport { vehicles, bookings, services } from '@/db/schema';\nimport { eq } from 'drizzle-orm/expressions';\nimport { VehicleList } from '@/components/account/VehicleList';\nimport { BookingHistory } from '@/components/account/BookingHistory';\nimport { UpcomingAppointments } from '@/components/account/UpcomingAppointments';\n\nexport default async function Dashboard() {\n  const session = await auth();\n  \n  if (!session?.user) {\n    redirect('/account/login');\n  }\n  \n  const userVehicles = await db.query.vehicles.findMany({\n    where: eq(vehicles.userId, session.user.id)\n  });\n  \n  const userBookings = await db.query.bookings.findMany({\n    where: eq(bookings.userId, session.user.id),\n    with: {\n      service: true,\n      vehicle: true\n    },\n    orderBy: (bookings, { desc }) => [desc(bookings.date)]\n  });\n  \n  const upcomingBookings = userBookings.filter(booking => \n    new Date(booking.date) >= new Date() && booking.status !== 'completed'\n  );\n  \n  const pastBookings = userBookings.filter(booking => \n    new Date(booking.date) < new Date() || booking.status === 'completed'\n  );\n  \n  return (\n    <div className=\"container mx-auto py-8\">\n      <h1 className=\"text-3xl font-bold mb-6\">Your Dashboard</h1>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n        <section>\n          <h2 className=\"text-2xl font-semibold mb-4\">Your Vehicles</h2>\n          <VehicleList vehicles={userVehicles} />\n        </section>\n        \n        <section>\n          <h2 className=\"text-2xl font-semibold mb-4\">Upcoming Appointments</h2>\n          <UpcomingAppointments bookings={upcomingBookings} />\n        </section>\n      </div>\n      \n      <section className=\"mt-12\">\n        <h2 className=\"text-2xl font-semibold mb-4\">Service History</h2>\n        <BookingHistory bookings={pastBookings} />\n      </section>\n    </div>\n  );\n}\n```",
      "testStrategy": "1. Test vehicle CRUD operations (add, view, edit, delete)\n2. Verify service history displays correctly with proper sorting\n3. Test upcoming appointments display and status updates\n4. Ensure proper data loading and error states\n5. Test responsive design across device sizes\n6. Verify that users can only access their own data",
      "priority": "medium",
      "dependencies": [
        1,
        2
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 4,
      "title": "Service Catalog Implementation",
      "description": "Create a detailed service catalog page with service descriptions, pricing estimates, and 'Book Now' buttons",
      "details": "1. Design and implement service cards with detailed information\n2. Create database seed script for initial service offerings\n3. Implement filtering/categorization of services\n4. Add 'Book Now' buttons that link to the booking form\n5. Include estimated pricing and service duration\n\nExample service catalog implementation:\n```tsx\n// app/services/page.tsx\nimport { db } from '@/db';\nimport { services } from '@/db/schema';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\n\nexport default async function ServicesPage() {\n  const allServices = await db.query.services.findMany();\n  \n  // Group services by category if needed\n  const servicesByCategory = allServices.reduce((acc, service) => {\n    const category = service.category || 'General';\n    if (!acc[category]) acc[category] = [];\n    acc[category].push(service);\n    return acc;\n  }, {});\n  \n  return (\n    <div className=\"container mx-auto py-8\">\n      <h1 className=\"text-3xl font-bold mb-6\">Our Services</h1>\n      \n      {Object.entries(servicesByCategory).map(([category, services]) => (\n        <section key={category} className=\"mb-12\">\n          <h2 className=\"text-2xl font-semibold mb-4\">{category}</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {services.map((service) => (\n              <Card key={service.id} className=\"h-full flex flex-col\">\n                <CardHeader>\n                  <CardTitle>{service.name}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"flex-grow\">\n                  <CardDescription>{service.description}</CardDescription>\n                  <div className=\"mt-4\">\n                    <p className=\"font-semibold\">Estimated Price: ${service.estimatedPrice}</p>\n                    <p>Duration: {service.duration} minutes</p>\n                  </div>\n                </CardContent>\n                <CardFooter>\n                  <Button asChild className=\"w-full\">\n                    <Link href={`/book?service=${service.id}`}>Book Now</Link>\n                  </Button>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n        </section>\n      ))}\n    </div>\n  );\n}\n```\n\nExample seed data:\n```typescript\n// db/seed.ts\nimport { db } from './index';\nimport { services } from './schema';\n\nasync function seed() {\n  await db.insert(services).values([\n    {\n      name: 'Oil Change',\n      description: 'Full synthetic oil change with filter replacement',\n      estimatedPrice: 89.99,\n      duration: 45,\n      category: 'Maintenance'\n    },\n    {\n      name: 'Brake Pad Replacement',\n      description: 'Front or rear brake pad replacement with inspection',\n      estimatedPrice: 149.99,\n      duration: 90,\n      category: 'Repairs'\n    },\n    // Add more services\n  ]);\n  \n  console.log('Seed data inserted');\n}\n\nseed().catch(console.error);\n```",
      "testStrategy": "1. Verify all services display correctly with proper information\n2. Test filtering/categorization functionality\n3. Ensure 'Book Now' buttons link to the correct booking form with pre-selected service\n4. Test responsive design of service cards\n5. Verify data loading states and error handling",
      "priority": "medium",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 5,
      "title": "Online Booking System Frontend",
      "description": "Create a multi-step booking form allowing users to select services, choose date/time, and enter vehicle details",
      "details": "1. Design multi-step booking form with the following steps:\n   - Service selection\n   - Date and time selection\n   - Vehicle details (if not logged in)\n   - Confirmation\n2. Implement form state management using React Hook Form\n3. Add validation for all form fields\n4. Create date/time picker using date-fns and shadcn/ui components\n5. Implement responsive design for all form steps\n\nExample booking form implementation:\n```tsx\n// app/book/page.tsx\n'use client';\n\nimport { useState } from 'react';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport { Button } from '@/components/ui/button';\nimport { ServiceSelection } from '@/components/booking/ServiceSelection';\nimport { DateTimeSelection } from '@/components/booking/DateTimeSelection';\nimport { VehicleDetails } from '@/components/booking/VehicleDetails';\nimport { BookingConfirmation } from '@/components/booking/BookingConfirmation';\nimport { useSession } from 'next-auth/react';\n\nconst bookingSchema = z.object({\n  serviceId: z.number(),\n  date: z.date(),\n  time: z.string(),\n  vehicleId: z.number().optional(),\n  vehicle: z.object({\n    make: z.string().min(1),\n    model: z.string().min(1),\n    year: z.number().min(1900).max(new Date().getFullYear() + 1),\n    notes: z.string().optional()\n  }).optional()\n});\n\ntype BookingFormData = z.infer<typeof bookingSchema>;\n\nexport default function BookingPage() {\n  const [step, setStep] = useState(1);\n  const searchParams = useSearchParams();\n  const router = useRouter();\n  const { data: session } = useSession();\n  \n  const methods = useForm<BookingFormData>({\n    resolver: zodResolver(bookingSchema),\n    defaultValues: {\n      serviceId: searchParams.get('service') ? parseInt(searchParams.get('service')!) : undefined\n    }\n  });\n  \n  const onSubmit = async (data: BookingFormData) => {\n    try {\n      const response = await fetch('/api/bookings', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data)\n      });\n      \n      if (!response.ok) throw new Error('Failed to create booking');\n      \n      const result = await response.json();\n      router.push(`/account/dashboard?booking=${result.id}`);\n    } catch (error) {\n      console.error('Booking error:', error);\n    }\n  };\n  \n  return (\n    <div className=\"container mx-auto py-8\">\n      <h1 className=\"text-3xl font-bold mb-6\">Book a Service</h1>\n      \n      <div className=\"flex justify-between mb-8\">\n        {[1, 2, 3, 4].map((i) => (\n          <div key={i} className={`step ${i <= step ? 'active' : ''}`}>\n            Step {i}\n          </div>\n        ))}\n      </div>\n      \n      <FormProvider {...methods}>\n        <form onSubmit={methods.handleSubmit(onSubmit)}>\n          {step === 1 && (\n            <ServiceSelection \n              onNext={() => setStep(2)} \n            />\n          )}\n          \n          {step === 2 && (\n            <DateTimeSelection \n              onBack={() => setStep(1)} \n              onNext={() => setStep(3)} \n            />\n          )}\n          \n          {step === 3 && (\n            <VehicleDetails \n              isLoggedIn={!!session} \n              onBack={() => setStep(2)} \n              onNext={() => setStep(4)} \n            />\n          )}\n          \n          {step === 4 && (\n            <BookingConfirmation \n              onBack={() => setStep(3)} \n            />\n          )}\n        </form>\n      </FormProvider>\n    </div>\n  );\n}\n```",
      "testStrategy": "1. Test form validation for all fields\n2. Verify multi-step navigation works correctly\n3. Test date/time selection with valid and invalid inputs\n4. Ensure vehicle selection works for logged-in users\n5. Test vehicle details form for non-logged-in users\n6. Verify form submission and error handling\n7. Test responsive design across device sizes",
      "priority": "high",
      "dependencies": [
        1,
        2,
        4
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 6,
      "title": "Online Booking System Backend",
      "description": "Implement API endpoints for handling booking creation, availability checking, and booking management",
      "details": "1. Create API endpoint for booking creation\n2. Implement availability checking logic\n3. Add booking validation and conflict prevention\n4. Create endpoints for retrieving and updating bookings\n5. Implement booking confirmation notifications (optional)\n\nExample booking API implementation:\n```typescript\n// app/api/bookings/route.ts\nimport { NextRequest, NextResponse } from 'next/server';\nimport { db } from '@/db';\nimport { bookings, vehicles } from '@/db/schema';\nimport { auth } from '@/auth';\nimport { z } from 'zod';\n\nconst bookingSchema = z.object({\n  serviceId: z.number(),\n  date: z.string().refine(val => !isNaN(Date.parse(val))),\n  time: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/),\n  vehicleId: z.number().optional(),\n  vehicle: z.object({\n    make: z.string().min(1),\n    model: z.string().min(1),\n    year: z.number().min(1900).max(new Date().getFullYear() + 1),\n    notes: z.string().optional()\n  }).optional()\n});\n\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await auth();\n    if (!session?.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    const body = await request.json();\n    const validatedData = bookingSchema.parse(body);\n    \n    // Check if the requested time slot is available\n    const bookingDate = new Date(`${validatedData.date}T${validatedData.time}`);\n    const existingBookings = await db.query.bookings.findMany({\n      where: {\n        date: bookingDate.toISOString().split('T')[0],\n        time: validatedData.time\n      }\n    });\n    \n    if (existingBookings.length > 0) {\n      return NextResponse.json({ error: 'Time slot not available' }, { status: 400 });\n    }\n    \n    // Handle vehicle creation or selection\n    let vehicleId = validatedData.vehicleId;\n    \n    if (!vehicleId && validatedData.vehicle) {\n      // Create a new vehicle\n      const newVehicle = await db.insert(vehicles).values({\n        userId: session.user.id,\n        make: validatedData.vehicle.make,\n        model: validatedData.vehicle.model,\n        year: validatedData.vehicle.year,\n        notes: validatedData.vehicle.notes || ''\n      }).returning({ id: vehicles.id });\n      \n      vehicleId = newVehicle[0].id;\n    }\n    \n    if (!vehicleId) {\n      return NextResponse.json({ error: 'Vehicle information required' }, { status: 400 });\n    }\n    \n    // Create the booking\n    const newBooking = await db.insert(bookings).values({\n      userId: session.user.id,\n      vehicleId,\n      serviceId: validatedData.serviceId,\n      date: bookingDate.toISOString().split('T')[0],\n      time: validatedData.time,\n      status: 'pending'\n    }).returning({ id: bookings.id });\n    \n    return NextResponse.json({ id: newBooking[0].id });\n  } catch (error) {\n    console.error('Booking error:', error);\n    return NextResponse.json({ error: 'Invalid request' }, { status: 400 });\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await auth();\n    if (!session?.user) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n    \n    const { searchParams } = new URL(request.url);\n    const id = searchParams.get('id');\n    \n    if (id) {\n      // Get specific booking\n      const booking = await db.query.bookings.findFirst({\n        where: {\n          id: parseInt(id),\n          userId: session.user.id\n        },\n        with: {\n          service: true,\n          vehicle: true\n        }\n      });\n      \n      if (!booking) {\n        return NextResponse.json({ error: 'Booking not found' }, { status: 404 });\n      }\n      \n      return NextResponse.json(booking);\n    } else {\n      // Get all user bookings\n      const userBookings = await db.query.bookings.findMany({\n        where: {\n          userId: session.user.id\n        },\n        with: {\n          service: true,\n          vehicle: true\n        },\n        orderBy: (bookings, { desc }) => [desc(bookings.date)]\n      });\n      \n      return NextResponse.json(userBookings);\n    }\n  } catch (error) {\n    console.error('Error fetching bookings:', error);\n    return NextResponse.json({ error: 'Server error' }, { status: 500 });\n  }\n}\n```",
      "testStrategy": "1. Test booking creation with valid and invalid data\n2. Verify availability checking prevents double bookings\n3. Test vehicle creation during booking process\n4. Verify booking retrieval for authenticated users\n5. Test booking status updates\n6. Ensure proper error handling and validation\n7. Test API security to prevent unauthorized access",
      "priority": "high",
      "dependencies": [
        1,
        2,
        3,
        5
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 7,
      "title": "Admin Dashboard Implementation",
      "description": "Create a basic admin dashboard for internal staff to view and manage bookings",
      "details": "1. Create admin dashboard page at `/admin/dashboard`\n2. Implement booking list view with filtering options\n3. Add booking status management functionality\n4. Create admin authentication/authorization\n5. Add basic analytics (optional)\n\nExample admin dashboard implementation:\n```tsx\n// app/admin/dashboard/page.tsx\nimport { auth } from '@/auth';\nimport { redirect } from 'next/navigation';\nimport { db } from '@/db';\nimport { bookings, users } from '@/db/schema';\nimport { eq } from 'drizzle-orm/expressions';\nimport { format } from 'date-fns';\nimport { BookingStatusSelect } from '@/components/admin/BookingStatusSelect';\nimport { DataTable } from '@/components/ui/data-table';\n\nasync function isAdmin(userId: string) {\n  const user = await db.query.users.findFirst({\n    where: eq(users.id, userId)\n  });\n  \n  return user?.role === 'admin';\n}\n\nexport default async function AdminDashboard() {\n  const session = await auth();\n  \n  if (!session?.user) {\n    redirect('/account/login?callbackUrl=/admin/dashboard');\n  }\n  \n  const isUserAdmin = await isAdmin(session.user.id);\n  if (!isUserAdmin) {\n    redirect('/');\n  }\n  \n  const allBookings = await db.query.bookings.findMany({\n    with: {\n      user: true,\n      service: true,\n      vehicle: true\n    },\n    orderBy: (bookings, { desc }) => [desc(bookings.date)]\n  });\n  \n  const columns = [\n    {\n      accessorKey: 'id',\n      header: 'ID'\n    },\n    {\n      accessorKey: 'user.name',\n      header: 'Customer'\n    },\n    {\n      accessorKey: 'service.name',\n      header: 'Service'\n    },\n    {\n      accessorKey: 'date',\n      header: 'Date',\n      cell: ({ row }) => format(new Date(row.original.date), 'MMM dd, yyyy')\n    },\n    {\n      accessorKey: 'time',\n      header: 'Time'\n    },\n    {\n      accessorKey: 'vehicle',\n      header: 'Vehicle',\n      cell: ({ row }) => `${row.original.vehicle.year} ${row.original.vehicle.make} ${row.original.vehicle.model}`\n    },\n    {\n      accessorKey: 'status',\n      header: 'Status',\n      cell: ({ row }) => (\n        <BookingStatusSelect \n          bookingId={row.original.id} \n          initialStatus={row.original.status} \n        />\n      )\n    }\n  ];\n  \n  return (\n    <div className=\"container mx-auto py-8\">\n      <h1 className=\"text-3xl font-bold mb-6\">Admin Dashboard</h1>\n      \n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h2 className=\"text-xl font-semibold mb-4\">All Bookings</h2>\n        <DataTable columns={columns} data={allBookings} />\n      </div>\n    </div>\n  );\n}\n```\n\nExample booking status update component:\n```tsx\n// components/admin/BookingStatusSelect.tsx\n'use client';\n\nimport { useState } from 'react';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { toast } from '@/components/ui/use-toast';\n\ninterface BookingStatusSelectProps {\n  bookingId: number;\n  initialStatus: string;\n}\n\nexport function BookingStatusSelect({ bookingId, initialStatus }: BookingStatusSelectProps) {\n  const [status, setStatus] = useState(initialStatus);\n  const [isUpdating, setIsUpdating] = useState(false);\n  \n  const updateStatus = async (newStatus: string) => {\n    setIsUpdating(true);\n    \n    try {\n      const response = await fetch(`/api/admin/bookings/${bookingId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ status: newStatus })\n      });\n      \n      if (!response.ok) throw new Error('Failed to update status');\n      \n      setStatus(newStatus);\n      toast({\n        title: 'Status updated',\n        description: `Booking #${bookingId} status changed to ${newStatus}`\n      });\n    } catch (error) {\n      console.error('Status update error:', error);\n      toast({\n        title: 'Update failed',\n        description: 'Could not update booking status',\n        variant: 'destructive'\n      });\n    } finally {\n      setIsUpdating(false);\n    }\n  };\n  \n  return (\n    <Select\n      value={status}\n      onValueChange={updateStatus}\n      disabled={isUpdating}\n    >\n      <SelectTrigger className=\"w-32\">\n        <SelectValue placeholder=\"Status\" />\n      </SelectTrigger>\n      <SelectContent>\n        <SelectItem value=\"pending\">Pending</SelectItem>\n        <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n        <SelectItem value=\"in-progress\">In Progress</SelectItem>\n        <SelectItem value=\"completed\">Completed</SelectItem>\n        <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n      </SelectContent>\n    </Select>\n  );\n}\n```",
      "testStrategy": "1. Test admin authentication and authorization\n2. Verify booking list displays correctly with all relevant information\n3. Test booking status updates\n4. Verify filtering and sorting functionality\n5. Test responsive design for admin dashboard\n6. Ensure non-admin users cannot access the dashboard",
      "priority": "medium",
      "dependencies": [
        1,
        6
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "Homepage and Navigation Updates",
      "description": "Update the homepage and navigation to highlight new features like online booking and user accounts",
      "details": "1. Update homepage hero section to highlight online booking\n2. Add prominent call-to-action buttons for booking and account creation\n3. Update navigation to include account and booking links\n4. Create a responsive navigation menu with authentication state awareness\n5. Add links to the full service catalog\n\nExample homepage update:\n```tsx\n// app/page.tsx\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { auth } from '@/auth';\n\nexport default async function Home() {\n  const session = await auth();\n  \n  return (\n    <main>\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-r from-blue-600 to-blue-800 text-white py-20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-3xl\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Mobile Auto Repair at Your Doorstep</h1>\n            <p className=\"text-xl mb-8\">Professional mechanics come to you. Now with online booking!</p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4\">\n              <Button asChild size=\"lg\" className=\"bg-white text-blue-700 hover:bg-gray-100\">\n                <Link href=\"/book\">Book a Service Online</Link>\n              </Button>\n              \n              {!session?.user ? (\n                <Button asChild size=\"lg\" variant=\"outline\" className=\"border-white text-white hover:bg-white/10\">\n                  <Link href=\"/account/signup\">Create an Account</Link>\n                </Button>\n              ) : (\n                <Button asChild size=\"lg\" variant=\"outline\" className=\"border-white text-white hover:bg-white/10\">\n                  <Link href=\"/account/dashboard\">View Your Dashboard</Link>\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      {/* Feature Highlights */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-3xl font-bold text-center mb-12\">New Features for Your Convenience</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div className=\"bg-white rounded-lg shadow p-6 text-center\">\n              <h3 className=\"text-xl font-semibold mb-3\">Online Booking</h3>\n              <p className=\"mb-4\">Schedule your service with just a few clicks, 24/7.</p>\n              <Button asChild variant=\"outline\">\n                <Link href=\"/book\">Book Now</Link>\n              </Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow p-6 text-center\">\n              <h3 className=\"text-xl font-semibold mb-3\">User Accounts</h3>\n              <p className=\"mb-4\">Manage your vehicles and view your service history.</p>\n              <Button asChild variant=\"outline\">\n                <Link href=\"/account/dashboard\">Your Account</Link>\n              </Button>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow p-6 text-center\">\n              <h3 className=\"text-xl font-semibold mb-3\">Service Catalog</h3>\n              <p className=\"mb-4\">Browse our comprehensive list of services with pricing.</p>\n              <Button asChild variant=\"outline\">\n                <Link href=\"/services\">View Services</Link>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      {/* Rest of the homepage content */}\n    </main>\n  );\n}\n```\n\nExample navigation component:\n```tsx\n// components/layout/Navbar.tsx\n'use client';\n\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport { Button } from '@/components/ui/button';\nimport { useSession, signOut } from 'next-auth/react';\n\nexport function Navbar() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const pathname = usePathname();\n  const { data: session } = useSession();\n  \n  const isActive = (path: string) => pathname === path;\n  \n  return (\n    <nav className=\"bg-white shadow-sm\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center\">\n            <Link href=\"/\" className=\"text-xl font-bold\">Mobile Mechanic Muscle</Link>\n          </div>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            <Link \n              href=\"/services\" \n              className={`px-3 py-2 rounded-md ${isActive('/services') ? 'bg-blue-100 text-blue-700' : 'hover:bg-gray-100'}`}\n            >\n              Services\n            </Link>\n            <Link \n              href=\"/book\" \n              className={`px-3 py-2 rounded-md ${isActive('/book') ? 'bg-blue-100 text-blue-700' : 'hover:bg-gray-100'}`}\n            >\n              Book Online\n            </Link>\n            \n            {session?.user ? (\n              <>\n                <Link \n                  href=\"/account/dashboard\" \n                  className={`px-3 py-2 rounded-md ${isActive('/account/dashboard') ? 'bg-blue-100 text-blue-700' : 'hover:bg-gray-100'}`}\n                >\n                  Dashboard\n                </Link>\n                <Button variant=\"ghost\" onClick={() => signOut()}>\n                  Sign Out\n                </Button>\n              </>\n            ) : (\n              <>\n                <Link href=\"/account/login\">\n                  <Button variant=\"ghost\">Sign In</Button>\n                </Link>\n                <Link href=\"/account/signup\">\n                  <Button>Sign Up</Button>\n                </Link>\n              </>\n            )}\n          </div>\n          \n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <button \n              onClick={() => setIsMenuOpen(!isMenuOpen)}\n              className=\"inline-flex items-center justify-center p-2 rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-100\"\n            >\n              <span className=\"sr-only\">Open main menu</span>\n              {/* Icon for menu */}\n              <svg className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                {isMenuOpen ? (\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                ) : (\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n                )}\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Mobile Navigation */}\n      {isMenuOpen && (\n        <div className=\"md:hidden\">\n          <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3\">\n            <Link \n              href=\"/services\" \n              className={`block px-3 py-2 rounded-md ${isActive('/services') ? 'bg-blue-100 text-blue-700' : 'hover:bg-gray-100'}`}\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Services\n            </Link>\n            <Link \n              href=\"/book\" \n              className={`block px-3 py-2 rounded-md ${isActive('/book') ? 'bg-blue-100 text-blue-700' : 'hover:bg-gray-100'}`}\n              onClick={() => setIsMenuOpen(false)}\n            >\n              Book Online\n            </Link>\n            \n            {session?.user ? (\n              <>\n                <Link \n                  href=\"/account/dashboard\" \n                  className={`block px-3 py-2 rounded-md ${isActive('/account/dashboard') ? 'bg-blue-100 text-blue-700' : 'hover:bg-gray-100'}`}\n                  onClick={() => setIsMenuOpen(false)}\n                >\n                  Dashboard\n                </Link>\n                <button \n                  onClick={() => {\n                    signOut();\n                    setIsMenuOpen(false);\n                  }}\n                  className=\"block w-full text-left px-3 py-2 rounded-md hover:bg-gray-100\"\n                >\n                  Sign Out\n                </button>\n              </>\n            ) : (\n              <>\n                <Link \n                  href=\"/account/login\" \n                  className=\"block px-3 py-2 rounded-md hover:bg-gray-100\"\n                  onClick={() => setIsMenuOpen(false)}\n                >\n                  Sign In\n                </Link>\n                <Link \n                  href=\"/account/signup\" \n                  className=\"block px-3 py-2 rounded-md hover:bg-gray-100\"\n                  onClick={() => setIsMenuOpen(false)}\n                >\n                  Sign Up\n                </Link>\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </nav>\n  );\n}\n```",
      "testStrategy": "1. Verify homepage updates display correctly\n2. Test navigation links for both authenticated and unauthenticated users\n3. Ensure responsive design works on mobile devices\n4. Test mobile menu functionality\n5. Verify call-to-action buttons link to the correct pages\n6. Test authentication state changes in the navigation",
      "priority": "low",
      "dependencies": [
        2,
        3,
        5
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "UI Component Integration with shadcn/ui",
      "description": "Integrate shadcn/ui components for forms, modals, tables, and other UI elements across the application",
      "details": "1. Initialize shadcn/ui in the project: `npx shadcn-ui@latest init`\n2. Add required components:\n   - Form components: `npx shadcn-ui@latest add form`\n   - Button: `npx shadcn-ui@latest add button`\n   - Card: `npx shadcn-ui@latest add card`\n   - Dialog/Modal: `npx shadcn-ui@latest add dialog`\n   - Select: `npx shadcn-ui@latest add select`\n   - Table: `npx shadcn-ui@latest add table`\n   - Date picker: `npx shadcn-ui@latest add calendar`\n   - Toast notifications: `npx shadcn-ui@latest add toast`\n3. Create custom theme configuration\n4. Implement consistent styling across the application\n\nExample shadcn/ui initialization and configuration:\n```bash\n# Initialize shadcn/ui\nnpx shadcn-ui@latest init\n\n# Configure with project preferences\n# - Typescript: Yes\n# - Style: Default (or customize)\n# - Base color: Slate (or preferred color)\n# - Global CSS: app/globals.css\n# - CSS variables: Yes\n# - React Server Components: Yes\n# - Components directory: components/ui\n# - Utility directory: lib/utils\n\n# Add required components\nnpx shadcn-ui@latest add button\nnpx shadcn-ui@latest add form\nnpx shadcn-ui@latest add input\nnpx shadcn-ui@latest add select\nnpx shadcn-ui@latest add card\nnpx shadcn-ui@latest add dialog\nnpx shadcn-ui@latest add table\nnpx shadcn-ui@latest add calendar\nnpx shadcn-ui@latest add toast\n```\n\nExample form implementation with shadcn/ui:\n```tsx\n// components/account/VehicleForm.tsx\n'use client';\n\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { toast } from '@/components/ui/use-toast';\n\nconst vehicleSchema = z.object({\n  make: z.string().min(1, 'Make is required'),\n  model: z.string().min(1, 'Model is required'),\n  year: z.string().refine(\n    (val) => {\n      const year = parseInt(val);\n      return !isNaN(year) && year >= 1900 && year <= new Date().getFullYear() + 1;\n    },\n    { message: 'Please enter a valid year' }\n  ),\n  notes: z.string().optional(),\n});\n\ntype VehicleFormValues = z.infer<typeof vehicleSchema>;\n\ninterface VehicleFormProps {\n  onSuccess?: (data: any) => void;\n  initialData?: VehicleFormValues;\n}\n\nexport function VehicleForm({ onSuccess, initialData }: VehicleFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  \n  const form = useForm<VehicleFormValues>({\n    resolver: zodResolver(vehicleSchema),\n    defaultValues: initialData || {\n      make: '',\n      model: '',\n      year: '',\n      notes: '',\n    },\n  });\n  \n  async function onSubmit(data: VehicleFormValues) {\n    setIsSubmitting(true);\n    \n    try {\n      const response = await fetch('/api/vehicles', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) throw new Error('Failed to save vehicle');\n      \n      const result = await response.json();\n      \n      toast({\n        title: 'Vehicle saved',\n        description: 'Your vehicle has been added to your account',\n      });\n      \n      if (onSuccess) onSuccess(result);\n      form.reset();\n    } catch (error) {\n      console.error('Vehicle save error:', error);\n      toast({\n        title: 'Something went wrong',\n        description: 'Could not save your vehicle. Please try again.',\n        variant: 'destructive',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  }\n  \n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"make\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Make</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Toyota\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"model\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Model</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Camry\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"year\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Year</FormLabel>\n              <FormControl>\n                <Input placeholder=\"2020\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"notes\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Notes (Optional)</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Any additional details about your vehicle\"\n                  {...field}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <Button type=\"submit\" disabled={isSubmitting}>\n          {isSubmitting ? 'Saving...' : 'Save Vehicle'}\n        </Button>\n      </form>\n    </Form>\n  );\n}\n```",
      "testStrategy": "1. Verify all shadcn/ui components render correctly\n2. Test form validation using shadcn/ui form components\n3. Test modal/dialog functionality\n4. Verify table components display data correctly\n5. Test toast notifications\n6. Ensure consistent styling across the application\n7. Test responsive design of all components",
      "priority": "medium",
      "dependencies": [],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 10,
      "title": "Integration Testing and Deployment",
      "description": "Perform comprehensive testing of all features and prepare the application for deployment",
      "details": "1. Create end-to-end test scenarios covering all user flows\n2. Test integration between all components and features\n3. Perform cross-browser and responsive design testing\n4. Set up deployment configuration for Vercel\n5. Create database migration scripts for production\n6. Implement error monitoring and logging\n\nExample test scenarios:\n1. User registration and login flow\n2. Vehicle management (add, edit, delete)\n3. Service browsing and filtering\n4. Booking creation process (all steps)\n5. Admin dashboard functionality\n6. Authentication and authorization\n\nExample Vercel configuration (vercel.json):\n```json\n{\n  \"version\": 2,\n  \"buildCommand\": \"pnpm run build\",\n  \"installCommand\": \"pnpm install\",\n  \"framework\": \"nextjs\",\n  \"regions\": [\"iad1\"],\n  \"env\": {\n    \"NEXTAUTH_URL\": \"https://your-production-url.com\",\n    \"NEXTAUTH_SECRET\": \"@nextauth_secret\"\n  }\n}\n```\n\nExample database migration script:\n```typescript\n// db/migrate.ts\nimport { drizzle } from 'drizzle-orm/vercel-postgres';\nimport { migrate } from 'drizzle-orm/vercel-postgres/migrator';\nimport { sql } from '@vercel/postgres';\n\nasync function runMigration() {\n  const db = drizzle(sql);\n  \n  console.log('Running migrations...');\n  \n  await migrate(db, { migrationsFolder: 'drizzle/migrations' });\n  \n  console.log('Migrations completed successfully');\n  \n  process.exit(0);\n}\n\nrunMigration().catch((err) => {\n  console.error('Migration failed:', err);\n  process.exit(1);\n});\n```\n\nExample end-to-end test with Playwright:\n```typescript\n// tests/booking-flow.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Booking Flow', () => {\n  test('User can complete booking process', async ({ page }) => {\n    // Step 1: Navigate to services page\n    await page.goto('/services');\n    \n    // Step 2: Click on a service's \"Book Now\" button\n    await page.click('text=Oil Change >> button:has-text(\"Book Now\")');\n    \n    // Step 3: Verify we're on the booking page with service pre-selected\n    await expect(page).toHaveURL(/\\/book\\?service=\\d+/);\n    \n    // Step 4: Select date and time\n    await page.click('button:has-text(\"Next\")');\n    await page.click('.calendar >> text=15'); // Select 15th day of month\n    await page.selectOption('select[name=\"time\"]', '10:00');\n    await page.click('button:has-text(\"Next\")');\n    \n    // Step 5: Enter vehicle details (for non-logged in user)\n    await page.fill('input[name=\"vehicle.make\"]', 'Toyota');\n    await page.fill('input[name=\"vehicle.model\"]', 'Camry');\n    await page.fill('input[name=\"vehicle.year\"]', '2020');\n    await page.click('button:has-text(\"Next\")');\n    \n    // Step 6: Confirm booking\n    await expect(page.locator('.booking-summary')).toContainText('Oil Change');\n    await expect(page.locator('.booking-summary')).toContainText('Toyota Camry');\n    await page.click('button:has-text(\"Confirm Booking\")');\n    \n    // Step 7: Verify success message\n    await expect(page.locator('.success-message')).toBeVisible();\n    await expect(page.locator('.success-message')).toContainText('Your booking has been confirmed');\n  });\n});\n```",
      "testStrategy": "1. Create comprehensive end-to-end tests for all major user flows\n2. Test all features in different browsers (Chrome, Firefox, Safari)\n3. Verify responsive design on mobile, tablet, and desktop\n4. Test error handling and edge cases\n5. Perform load testing for booking system\n6. Verify database migrations work correctly\n7. Test deployment process to staging environment before production",
      "priority": "high",
      "dependencies": [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9
      ],
      "status": "pending",
      "subtasks": []
    }
  ]
}